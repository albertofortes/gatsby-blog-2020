{"version":3,"sources":["webpack:///./src/templates/blog-tags.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","Tags","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","a","createElement","className","dangerouslySetInnerHTML","__html","map","_ref2","node","key","fields","slug","to","title","frontmatter","src","image","alt","date","excerpt","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","Header","_this","_React$Component","call","this","state","componentDidMount","console","log","render","siteTitle","props","react_default","gatsby_browser_entry","activeClassName","Component","Layout","children","_3254742343","Fragment","header","site","siteMetadata","siteRole","role","siteDescription","description","Date","getFullYear","href"],"mappings":"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","file":"component---src-templates-blog-tags-js-7a2d40174362a467dbf4.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with <em>${tag}</em>`\n\n  return (\n    <Layout>\n      <div className=\"container__inner\">\n        <h2 className=\"container__title\" dangerouslySetInnerHTML={{ __html: tagHeader }} />\n        <div className=\"posts\">\n          {edges.map(({ node }) => (\n            <div key={node.fields.slug} className=\"post\">\n              <Link to={node.fields.slug} title={node.frontmatter.title}><img className=\"post__image\" src={node.frontmatter.image} alt=\"\" /></Link>\n              <h3 className=\"post__title\"><Link to={node.fields.slug} title={node.frontmatter.title}>{node.frontmatter.title}{\" \"}</Link></h3>\n              <p className=\"post__date\">{node.frontmatter.date}</p>\n              \n              <div className=\"post__excerpt\">{node.frontmatter.excerpt}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            subtitle\n            date(formatString: \"DD MMMM, YYYY\")\n            image\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport { Link } from \"gatsby\";\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    // Define the initial state:\n    this.state = {};\n  }\n\n  componentDidMount () {\n    console.log('ComponentDidMount -->');\n  }\n\n  render () {\n    const { siteTitle } = this.props\n\n    return (\n      <header className=\"header\">\n        <h1 className=\"header__logo\">Hola, I'm <Link to=\"/\">{siteTitle}.</Link></h1>\n        <nav className=\"header__nav\">\n          <ul>\n            <li><Link to=\"/about\" activeClassName=\"active\">About</Link></li>\n            <li><Link to=\"/blog/\" activeClassName=\"active\">Blog</Link></li>\n          </ul>\n        </nav>\n        {/*<div className=\"header__container\">\n          <h2><strong>Front-end senior developer</strong> from 2006, UX/UI Engineer, working in remote, globally with companies, startups and agencies.</h2>\n        </div>*/}\n      </header>\n    )\n  }\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query HeaderQuery {\n      site {\n        siteMetadata {\n          title\n          role\n          description\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header className=\"header\" \n        siteTitle={data.site.siteMetadata.title}\n        siteRole={data.site.siteMetadata.role}\n        siteDescription={data.site.siteMetadata.description}\n      />\n      <div className=\"container\">\n        {children}\n      </div>\n      <footer className=\"footer\">\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </footer>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}